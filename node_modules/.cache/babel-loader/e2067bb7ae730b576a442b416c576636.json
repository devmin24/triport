{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst profileimgSlice = createSlice({\n  name: \"profile\",\n  initialState: {\n    user_img: \"\",\n    memberGrade: null,\n    nickname: null,\n    mypost_trils_data: [],\n    mypost_trilog_data: [],\n    like_trils_data: [],\n    like_trilog_data: []\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_img = action.payload.user_img;\n      state.memberGrade = action.payload.memberGrade;\n      state.nickname = action.payload.nickname;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    },\n    POST_TRILS_LOAD: (state, action) => {\n      state.mypost_trils_data = action.payload;\n    },\n    POST_TRILOG_LOAD: (state, action) => {\n      state.mypost_trilog_data = action.payload;\n    },\n    LIKE_TRILS_LOAD: (state, action) => {\n      state.like_trils_data = action.payload;\n    },\n    LIKE_TRILOG_LOAD: (state, action) => {\n      state.like_trilog_data = action.payload;\n    }\n  }\n}); // 프로필 조회\n\nconst getProfile = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      dispatch(GET_PROFILE({\n        user_img: data.results.profileImgUrl,\n        memberGrade: data.results.memberGrade,\n        nickname: data.results.nickname\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 프로필 수정\n\n\nconst updateProfile = (nickname, newpwd, newpwdcheck, img) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\"); // if (!access_token) {\n    //   console.log(\"토큰 없음\");\n    //   return;\n    // }\n    // formdata에 담기\n\n    let formData = new FormData();\n    formData.append(\"nickname\", nickname);\n    formData.append(\"newPassword\", newpwd);\n    formData.append(\"newPasswordCheck\", newpwdcheck);\n    formData.append(\"profileImgFile\", img);\n    console.log(formData);\n    const API = `${config}/member/profile`;\n    fetch(API, {\n      method: \"POST\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        Authorization: `${access_token}`\n      },\n      body: formData\n    }).then(res => res.json()).then(data => {\n      alert(\"수정되었습니다!\");\n      history.replace(\"/\");\n      history.go(0); // 메인 페이지로 돌아간 후 새로고침\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 내가 쓴 Trils 조회\n\n\nconst myTrilsLoad = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/posts/member`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      const results = data.results;\n      dispatch(POST_TRILS_LOAD(results));\n    });\n  };\n}; // 내가 쓴 Trilog 조회\n\n\nconst myTrilogLoad = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/boards/member`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      const results = data.results;\n      dispatch(POST_TRILOG_LOAD(results));\n    });\n  };\n}; // 좋아요 Trils 조회\n// 좋아요 Trilog 조회\n\n\nexport const {\n  SET_PREVIEW,\n  GET_PROFILE,\n  UPDATE_PROFILE,\n  POST_TRILS_LOAD,\n  POST_TRILOG_LOAD\n} = profileimgSlice.actions;\nexport const actionCreators = {\n  getProfile,\n  updateProfile,\n  myTrilsLoad,\n  myTrilogLoad\n};\nexport default profileimgSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/profile.js"],"names":["createSlice","config","profileimgSlice","name","initialState","user_img","memberGrade","nickname","mypost_trils_data","mypost_trilog_data","like_trils_data","like_trilog_data","reducers","SET_PREVIEW","state","action","payload","GET_PROFILE","UPDATE_PROFILE","uploading","POST_TRILS_LOAD","POST_TRILOG_LOAD","LIKE_TRILS_LOAD","LIKE_TRILOG_LOAD","getProfile","dispatch","getState","history","API","access_token","localStorage","getItem","console","log","fetch","method","headers","Accept","Authorization","then","res","json","data","results","profileImgUrl","catch","err","updateProfile","newpwd","newpwdcheck","img","formData","FormData","append","body","alert","replace","go","myTrilsLoad","myTrilogLoad","actions","actionCreators","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst profileimgSlice = createSlice({\n  name: \"profile\",\n  initialState: {\n    user_img: \"\",\n    memberGrade: null,\n    nickname: null,\n    mypost_trils_data: [],\n    mypost_trilog_data: [],\n    like_trils_data: [],\n    like_trilog_data: [],\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_img = action.payload.user_img;\n      state.memberGrade = action.payload.memberGrade;\n      state.nickname = action.payload.nickname;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    },\n    POST_TRILS_LOAD: (state, action) => {\n      state.mypost_trils_data = action.payload;\n    },\n    POST_TRILOG_LOAD: (state, action) => {\n      state.mypost_trilog_data = action.payload;\n    },\n    LIKE_TRILS_LOAD: (state, action) => {\n      state.like_trils_data = action.payload;\n    },\n    LIKE_TRILOG_LOAD: (state, action) => {\n      state.like_trilog_data = action.payload;\n    },\n  },\n});\n\n// 프로필 조회\nconst getProfile = () => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        dispatch(\n          GET_PROFILE({\n            user_img: data.results.profileImgUrl,\n            memberGrade: data.results.memberGrade,\n            nickname: data.results.nickname,\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 프로필 수정\nconst updateProfile = (nickname, newpwd, newpwdcheck, img) => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n\n    // if (!access_token) {\n    //   console.log(\"토큰 없음\");\n    //   return;\n    // }\n\n    // formdata에 담기\n    let formData = new FormData();\n    formData.append(\"nickname\", nickname);\n    formData.append(\"newPassword\", newpwd);\n    formData.append(\"newPasswordCheck\", newpwdcheck);\n    formData.append(\"profileImgFile\", img);\n    console.log(formData);\n\n    const API = `${config}/member/profile`;\n\n    fetch(API, {\n      method: \"POST\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        Authorization: `${access_token}`,\n      },\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        alert(\"수정되었습니다!\");\n        history.replace(\"/\");\n        history.go(0); // 메인 페이지로 돌아간 후 새로고침\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 내가 쓴 Trils 조회\nconst myTrilsLoad = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/posts/member`;\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const results = data.results;\n        dispatch(POST_TRILS_LOAD(results));\n      });\n  };\n};\n\n// 내가 쓴 Trilog 조회\nconst myTrilogLoad = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/boards/member`;\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const results = data.results;\n        dispatch(POST_TRILOG_LOAD(results));\n      });\n  };\n};\n\n// 좋아요 Trils 조회\n// 좋아요 Trilog 조회\n\nexport const {\n  SET_PREVIEW,\n  GET_PROFILE,\n  UPDATE_PROFILE,\n  POST_TRILS_LOAD,\n  POST_TRILOG_LOAD,\n} = profileimgSlice.actions;\n\nexport const actionCreators = {\n  getProfile,\n  updateProfile,\n  myTrilsLoad,\n  myTrilogLoad,\n};\n\nexport default profileimgSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}