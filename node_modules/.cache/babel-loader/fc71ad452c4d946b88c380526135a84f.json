{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { produce } from \"immer\"; // http://13.209.8.146\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    email: \"\",\n    password: \"\",\n    is_login: false\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.email = action.payload.uid;\n      console.log(action.payload);\n      state.is_login = true;\n    }\n  }\n}); // 로그인 여부 체크\n\nconst loginCheckDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const one_user = {\n      email: \"\",\n      password: \"\"\n    };\n    dispatch(setUser(one_user));\n  };\n}; // 회원가입\n\n\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname\n      })\n    }).then(() => {\n      console.log(\"회원가입 성공\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd\n      })\n    }).then(result => {\n      //성공시 토큰, 유저 정보 저장\n      if (result.status === 200) {\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        localStorage.setItem(\"token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n      }\n\n      return result.json();\n    }).then(result => {\n      //성공시 state.user 저장\n      if (result.status === 401) {\n        window.alert(\"로그인에 실패했습니다.\");\n      } else {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result));\n        dispatch(setUser({\n          email: result.u_id // name: result.name,\n\n        }));\n        history.push(\"/\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\n\nconst actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB\n};\nexport const {\n  setUser\n} = userSlice.actions;\nexport default userSlice.reducer;\nexport { actionCreators };","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","produce","userSlice","name","initialState","email","password","is_login","reducers","setUser","state","action","payload","uid","console","log","loginCheckDB","dispatch","getState","history","one_user","signupDB","pwd","pwdcheck","nickname","API","fetch","method","headers","Accept","body","JSON","stringify","passwordCheck","then","catch","err","loginDB","result","status","access_token","get","refresh_token","localStorage","setItem","json","window","alert","u_id","push","error","actionCreators","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { produce } from \"immer\";\n\n// http://13.209.8.146\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    email: \"\",\n    password: \"\",\n    is_login: false,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.email = action.payload.uid;\n      console.log(action.payload);\n      state.is_login = true;\n    },\n  },\n});\n\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const one_user = {\n      email: \"\",\n      password: \"\",\n    };\n    dispatch(setUser(one_user));\n  };\n};\n\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then(() => {\n        console.log(\"회원가입 성공\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        //성공시 토큰, 유저 정보 저장\n        if (result.status === 200) {\n          let access_token = result.headers.get(\"Access-Token\");\n          let refresh_token = result.headers.get(\"Refresh-Token\");\n\n          localStorage.setItem(\"token\", access_token);\n          localStorage.setItem(\"refresh_token\", refresh_token);\n        }\n        return result.json();\n      })\n      .then((result) => {\n        //성공시 state.user 저장\n        if (result.status === 401) {\n          window.alert(\"로그인에 실패했습니다.\");\n        } else {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result));\n          dispatch(\n            setUser({\n              email: result.u_id,\n              // name: result.name,\n            })\n          );\n          history.push(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\nconst actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n};\n\nexport const { setUser } = userSlice.actions;\nexport default userSlice.reducer;\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}