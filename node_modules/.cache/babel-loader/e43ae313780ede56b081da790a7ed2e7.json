{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false,\n    memberGrade: null,\n    profileImgUrl: null\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n      state.memberGrade = action.payload.memberGrade;\n      state.profileImgUrl = action.payload.profileImgUrl;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload; // 비밀번호 찾기 로딩 중일 때\n    }\n  }\n}); // 토큰 연장\n\nconst tokenExtension = () => {\n  const access_token = localStorage.getItem(\"access_token\");\n  const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n  const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n  const API = `${config}/auth/reissue`;\n  fetch(API, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `${access_token}`\n    },\n    body: JSON.stringify({\n      accessToken: accessToken,\n      refreshToken: refreshToken\n    })\n  }).then(result => {\n    // 헤더에 담긴 토큰과 만료시간 가져오기\n    let access_token = result.headers.get(\"Access-Token\");\n    let refresh_token = result.headers.get(\"Refresh-Token\"); // 로컬에 새로 받은 토큰 저장\n\n    localStorage.setItem(\"access_token\", access_token);\n    localStorage.setItem(\"refresh_token\", refresh_token);\n  }).catch(err => {\n    console.log(err);\n    console.log(\"토큰 재생성 실패\");\n  });\n}; // 회원가입\n\n\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname\n      })\n    }).then(res => {\n      console.log(\"회원가입 성공\");\n      window.alert(\"회원가입에 성공하였습니다!\");\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\");\n    });\n  };\n}; // 로그인\n\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token_exp = null;\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd\n      })\n    }).then(result => {\n      if (result.status !== 200) {\n        alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n        return {\n          ok: false\n        };\n      } //성공시 토큰, 유저 정보 저장\n\n\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n      // 로컬 스토리지에 토큰 저장하기\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      if (result.ok) {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        setInterval(tokenExtension, 1740000);\n        dispatch(setUser({\n          id: result.results.id,\n          nickname: result.results.nickname,\n          memberGrade: result.results.memberGrade,\n          profileImgUrl: result.results.profileImgUrl\n        }));\n        alert(\"로그인 되었습니다.\");\n        history.replace(\"/\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 소셜 로그인 (카카오) 인가코드 넘기기\n\n\nconst kakaoLogin = code => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    console.log(API);\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(result => {\n      if (result.status !== 200) {\n        alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n        return {\n          ok: false\n        };\n      }\n\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\"); // 로컬 스토리지에 토큰 저장하기\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      if (result.ok) {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        setInterval(tokenExtension, 1740000);\n        dispatch(setUser({\n          id: result.results.id,\n          nickname: result.results.nickname,\n          memberGrade: result.results.memberGrade,\n          profileImgUrl: result.results.profileImgUrl\n        }));\n        alert(\"로그인 되었습니다.\");\n        history.replace(\"/\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 소셜 로그아웃\n\n\nconst kakaoLogout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => {\n      console.log(res);\n      console.log(\"카카오 로그아웃 성공!\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 로그인 여부 체크\n\n\nconst loginCheckDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return;\n    }\n\n    dispatch(setUser({\n      id: userInfo.results.id,\n      nickname: userInfo.results.nickname,\n      memberGrade: userInfo.results.memberGrade,\n      profileImgUrl: userInfo.results.profileImgUrl\n    }));\n    setInterval(tokenExtension, 1740000);\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n}; // 비밀번호 찾기\n\n\nconst FindPwdDB = email => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(LOADING(true)); // 로딩중\n\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(res => res.json()) // json 형태로 변환해주고,\n    .then(data => {\n      dispatch(LOADING(false)); // 로딩 끝남\n\n      alert(data.message);\n      history.push(\"/login\");\n    }).catch(err => {\n      dispatch(LOADING(false));\n      console.log(err);\n    });\n  };\n};\n\n_c = FindPwdDB;\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout\n};\nexport const {\n  setUser,\n  logOut,\n  LOADING\n} = userSlice.actions;\nexport default userSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindPwdDB\");","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","config","userSlice","name","initialState","id","nickname","is_login","is_loading","memberGrade","profileImgUrl","reducers","setUser","state","action","payload","logOut","LOADING","tokenExtension","access_token","localStorage","getItem","accessToken","split","refreshToken","API","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","result","get","refresh_token","setItem","catch","err","console","log","signupDB","email","pwd","pwdcheck","dispatch","getState","history","password","passwordCheck","res","window","alert","push","loginDB","access_token_exp","status","ok","json","setInterval","results","replace","error","kakaoLogin","code","kakaoLogout","loginCheckDB","userInfo","parse","logout","removeItem","FindPwdDB","data","message","actionCreators","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false,\n    memberGrade: null,\n    profileImgUrl: null,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n      state.memberGrade = action.payload.memberGrade;\n      state.profileImgUrl = action.payload.profileImgUrl;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload; // 비밀번호 찾기 로딩 중일 때\n    },\n  },\n});\n// 토큰 연장\nconst tokenExtension = () => {\n  const access_token = localStorage.getItem(\"access_token\");\n  const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n  const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n  const API = `${config}/auth/reissue`;\n  fetch(API, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `${access_token}`,\n    },\n    body: JSON.stringify({\n      accessToken: accessToken,\n      refreshToken: refreshToken,\n    }),\n  })\n    .then((result) => {\n      // 헤더에 담긴 토큰과 만료시간 가져오기\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n\n      // 로컬에 새로 받은 토큰 저장\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n    })\n    .catch((err) => {\n      console.log(err);\n      console.log(\"토큰 재생성 실패\");\n    });\n};\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then((res) => {\n        console.log(\"회원가입 성공\");\n        window.alert(\"회원가입에 성공하였습니다!\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\n          \"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\"\n        );\n      });\n  };\n};\n// 로그인\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    let access_token_exp = null;\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        if (result.status !== 200) {\n          alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n          return { ok: false };\n        }\n        //성공시 토큰, 유저 정보 저장\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        if (result.ok) {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          setInterval(tokenExtension, 1740000);\n          dispatch(\n            setUser({\n              id: result.results.id,\n              nickname: result.results.nickname,\n              memberGrade: result.results.memberGrade,\n              profileImgUrl: result.results.profileImgUrl,\n            })\n          );\n          alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n// 소셜 로그인 (카카오) 인가코드 넘기기\nconst kakaoLogin = (code) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    console.log(API);\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((result) => {\n        if (result.status !== 200) {\n          alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n          return { ok: false };\n        }\n\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        if (result.ok) {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          setInterval(tokenExtension, 1740000);\n          dispatch(\n            setUser({\n              id: result.results.id,\n              nickname: result.results.nickname,\n              memberGrade: result.results.memberGrade,\n              profileImgUrl: result.results.profileImgUrl,\n            })\n          );\n          alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// 소셜 로그아웃\nconst kakaoLogout = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        console.log(\"카카오 로그아웃 성공!\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return;\n    }\n    dispatch(\n      setUser({\n        id: userInfo.results.id,\n        nickname: userInfo.results.nickname,\n        memberGrade: userInfo.results.memberGrade,\n        profileImgUrl: userInfo.results.profileImgUrl,\n      })\n    );\n    setInterval(tokenExtension, 1740000);\n  };\n};\n// 로그아웃\nconst logout = () => {\n  return function (dispatch, getState, { history }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n};\n// 비밀번호 찾기\nconst FindPwdDB = (email) => {\n  return function (dispatch, getState, { history }) {\n    dispatch(LOADING(true)); // 로딩중\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n      }),\n    })\n      .then((res) => res.json()) // json 형태로 변환해주고,\n      .then((data) => {\n        dispatch(LOADING(false)); // 로딩 끝남\n        alert(data.message);\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        dispatch(LOADING(false));\n        console.log(err);\n      });\n  };\n};\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout,\n};\nexport const { setUser, logOut, LOADING } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}