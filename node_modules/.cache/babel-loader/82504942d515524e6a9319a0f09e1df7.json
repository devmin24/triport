{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";import{config}from\"./config\";import{actionCreators as profileActions}from\"redux/modules/profile\";import{useDispatch}from\"react-redux\";var userSlice=createSlice({name:\"user\",initialState:{id:null,nickname:null,is_login:false,is_loading:false,memberGrade:null,profileImgUrl:null},reducers:{setUser:function setUser(state,action){state.id=action.payload.id;state.nickname=action.payload.nickname;state.is_login=true;state.memberGrade=action.payload.memberGrade;state.profileImgUrl=action.payload.profileImgUrl;},logOut:function logOut(state,action){state.id=null;state.nickname=null;state.is_login=false;},LOADING:function LOADING(state,action){state.is_loading=action.payload;// 비밀번호 찾기 로딩 중일 때\n}}});// 토큰 연장\nvar tokenExtension=function tokenExtension(){var access_token=localStorage.getItem(\"access_token\");var accessToken=localStorage.getItem(\"access_token\").split(\" \")[1];var refreshToken=localStorage.getItem(\"refresh_token\").split(\" \")[1];var API=\"\".concat(config,\"/auth/reissue\");fetch(API,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\",Authorization:\"\".concat(access_token)},body:JSON.stringify({accessToken:accessToken,refreshToken:refreshToken})}).then(function(result){// 헤더에 담긴 토큰과 만료시간 가져오기\nvar access_token=result.headers.get(\"Access-Token\");var refresh_token=result.headers.get(\"Refresh-Token\");// 로컬에 새로 받은 토큰 저장\nlocalStorage.setItem(\"access_token\",access_token);localStorage.setItem(\"refresh_token\",refresh_token);console.log(\"토큰 재생성 성공\");}).catch(function(err){console.log(err);});};// 회원가입\nvar signupDB=function signupDB(email,pwd,pwdcheck,nickname){return function(dispatch,getState,_ref){var history=_ref.history;var API=\"\".concat(config,\"/auth/signup\");fetch(API,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify({email:email,password:pwd,passwordCheck:pwdcheck,nickname:nickname})}).then(function(res){console.log(\"회원가입 성공\");window.alert(\"회원가입에 성공하였습니다!\");history.push(\"/login\");}).catch(function(err){console.log(err);window.alert(\"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\");});};};// 로그인\nvar loginDB=function loginDB(email,pwd){return function(dispatch,getState,_ref2){var history=_ref2.history;var access_token_exp=null;var API=\"\".concat(config,\"/auth/login\");fetch(API,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify({email:email,password:pwd})}).then(function(result){if(result.status!==200){alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");return{ok:false};}//성공시 토큰, 유저 정보 저장\nvar access_token=result.headers.get(\"Access-Token\");var refresh_token=result.headers.get(\"Refresh-Token\");var access_token_exp=result.headers.get(\"Access-Token-Expire-Time\");// 토큰 만료시간\n// 로컬 스토리지에 토큰 저장하기\nlocalStorage.setItem(\"access_token\",access_token);localStorage.setItem(\"refresh_token\",refresh_token);return result.json();// fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n}).then(function(result){if(result.ok){localStorage.setItem(\"userInfo\",JSON.stringify(result));// JSON.stringfy 가 body에 담아오는 값\nsetInterval(tokenExtension,1740000);// 29분 후 실행\n//setInterval(tokenExtension, 5000); // 5초\ndispatch(setUser({id:result.results.id,nickname:result.results.nickname,memberGrade:result.results.memberGrade,profileImgUrl:result.results.profileImgUrl}));dispatch(profileActions.GET_PROFILE({user_img:result.results.profileImgUrl,memberGrade:result.results.memberGrade,nickname:result.results.nickname}));alert(\"로그인 되었습니다.\");history.replace(\"/\");}}).catch(function(error){console.log(error);});};};// 소셜 로그인 (카카오) 인가코드 넘기기\nvar kakaoLogin=function kakaoLogin(code){return function(dispatch,getState,_ref3){var history=_ref3.history;var API=\"\".concat(config,\"/auth/kakao/callback?code=\").concat(code);fetch(API,{method:\"GET\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}}).then(function(result){if(result.status!==200){alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");return{ok:false};}var access_token=result.headers.get(\"Access-Token\");var refresh_token=result.headers.get(\"Refresh-Token\");// 로컬 스토리지에 토큰 저장하기\nlocalStorage.setItem(\"access_token\",access_token);localStorage.setItem(\"refresh_token\",refresh_token);return result.json();// fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n}).then(function(result){if(result.ok){localStorage.setItem(\"userInfo\",JSON.stringify(result));// JSON.stringfy 가 body에 담아오는 값\nsetInterval(tokenExtension,1740000);// 29분 후 실행\ndispatch(setUser({id:result.results.id,nickname:result.results.nickname,memberGrade:result.results.memberGrade,profileImgUrl:result.results.profileImgUrl}));alert(\"로그인 되었습니다.\");history.replace(\"/\");}}).catch(function(error){console.log(error);});};};// 소셜 로그아웃\nvar kakaoLogout=function kakaoLogout(){return function(dispatch,getState,_ref4){var history=_ref4.history;var access_token=localStorage.getItem(\"access_token\");var API=\"\".concat(config,\"/auth/logout\");fetch(API,{method:\"GET\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\",Authorization:\"\".concat(access_token)}}).then(function(res){console.log(res);console.log(\"카카오 로그아웃 성공!\");}).catch(function(err){console.log(err);});};};// 로그인 여부 체크\nvar loginCheckDB=function loginCheckDB(){return function(dispatch,getState,_ref5){var history=_ref5.history;var access_token=localStorage.getItem(\"access_token\");var userInfo=JSON.parse(localStorage.getItem(\"userInfo\"));if(!access_token||!userInfo){// 로컬스토리지에 토큰 또는 유저정보가 없으면\nreturn;}dispatch(setUser({id:userInfo.results.id,nickname:userInfo.results.nickname,memberGrade:userInfo.results.memberGrade,profileImgUrl:userInfo.results.profileImgUrl}));setInterval(tokenExtension,1740000);//setInterval(tokenExtension, 5000); // 5초\n};};// 로그아웃\nvar logout=function logout(){return function(dispatch,getState,_ref6){var history=_ref6.history;localStorage.removeItem(\"access_token\");localStorage.removeItem(\"refresh_token\");localStorage.removeItem(\"userInfo\");dispatch(logOut());console.log(\"일반 로그아웃 성공!\");alert(\"로그아웃 되었습니다.\");history.replace(\"/\");};};// 비밀번호 찾기\nvar FindPwdDB=function FindPwdDB(email){return function(dispatch,getState,_ref7){var history=_ref7.history;dispatch(LOADING(true));// 로딩중\nvar API=\"\".concat(config,\"/mail/reset/password\");fetch(API,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify({email:email})}).then(function(res){return res.json();})// json 형태로 변환해주고,\n.then(function(data){dispatch(LOADING(false));// 로딩 끝남\nalert(data.msg);history.push(\"/login\");}).catch(function(err){dispatch(LOADING(false));console.log(err);});};};export var actionCreators={loginCheckDB:loginCheckDB,signupDB:signupDB,loginDB:loginDB,logout:logout,FindPwdDB:FindPwdDB,tokenExtension:tokenExtension,kakaoLogin:kakaoLogin,kakaoLogout:kakaoLogout};var _userSlice$actions=userSlice.actions,setUser=_userSlice$actions.setUser,logOut=_userSlice$actions.logOut,LOADING=_userSlice$actions.LOADING;export{setUser,logOut,LOADING};export default userSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","config","actionCreators","profileActions","useDispatch","userSlice","name","initialState","id","nickname","is_login","is_loading","memberGrade","profileImgUrl","reducers","setUser","state","action","payload","logOut","LOADING","tokenExtension","access_token","localStorage","getItem","accessToken","split","refreshToken","API","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","result","get","refresh_token","setItem","console","log","catch","err","signupDB","email","pwd","pwdcheck","dispatch","getState","history","password","passwordCheck","res","window","alert","push","loginDB","access_token_exp","status","ok","json","setInterval","results","GET_PROFILE","user_img","replace","error","kakaoLogin","code","kakaoLogout","loginCheckDB","userInfo","parse","logout","removeItem","FindPwdDB","data","msg","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nimport { actionCreators as profileActions } from \"redux/modules/profile\";\nimport { useDispatch } from \"react-redux\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false,\n    memberGrade: null,\n    profileImgUrl: null,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n      state.memberGrade = action.payload.memberGrade;\n      state.profileImgUrl = action.payload.profileImgUrl;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload; // 비밀번호 찾기 로딩 중일 때\n    },\n  },\n});\n// 토큰 연장\nconst tokenExtension = () => {\n  const access_token = localStorage.getItem(\"access_token\");\n  const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n  const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n  const API = `${config}/auth/reissue`;\n  fetch(API, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `${access_token}`,\n    },\n    body: JSON.stringify({\n      accessToken: accessToken,\n      refreshToken: refreshToken,\n    }),\n  })\n    .then((result) => {\n      // 헤더에 담긴 토큰과 만료시간 가져오기\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n\n      // 로컬에 새로 받은 토큰 저장\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      console.log(\"토큰 재생성 성공\");\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then((res) => {\n        console.log(\"회원가입 성공\");\n        window.alert(\"회원가입에 성공하였습니다!\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\n          \"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\"\n        );\n      });\n  };\n};\n// 로그인\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    let access_token_exp = null;\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        if (result.status !== 200) {\n          alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n          return { ok: false };\n        }\n        //성공시 토큰, 유저 정보 저장\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        if (result.ok) {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          setInterval(tokenExtension, 1740000); // 29분 후 실행\n          //setInterval(tokenExtension, 5000); // 5초\n          dispatch(\n            setUser({\n              id: result.results.id,\n              nickname: result.results.nickname,\n              memberGrade: result.results.memberGrade,\n              profileImgUrl: result.results.profileImgUrl,\n            })\n          );\n          dispatch(\n            profileActions.GET_PROFILE({\n              user_img: result.results.profileImgUrl,\n              memberGrade: result.results.memberGrade,\n              nickname: result.results.nickname,\n            })\n          );\n          alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n// 소셜 로그인 (카카오) 인가코드 넘기기\nconst kakaoLogin = (code) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((result) => {\n        if (result.status !== 200) {\n          alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n          return { ok: false };\n        }\n\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        if (result.ok) {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          setInterval(tokenExtension, 1740000); // 29분 후 실행\n          dispatch(\n            setUser({\n              id: result.results.id,\n              nickname: result.results.nickname,\n              memberGrade: result.results.memberGrade,\n              profileImgUrl: result.results.profileImgUrl,\n            })\n          );\n          alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// 소셜 로그아웃\nconst kakaoLogout = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        console.log(\"카카오 로그아웃 성공!\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return;\n    }\n    dispatch(\n      setUser({\n        id: userInfo.results.id,\n        nickname: userInfo.results.nickname,\n        memberGrade: userInfo.results.memberGrade,\n        profileImgUrl: userInfo.results.profileImgUrl,\n      })\n    );\n    setInterval(tokenExtension, 1740000);\n    //setInterval(tokenExtension, 5000); // 5초\n  };\n};\n// 로그아웃\nconst logout = () => {\n  return function (dispatch, getState, { history }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n};\n// 비밀번호 찾기\nconst FindPwdDB = (email) => {\n  return function (dispatch, getState, { history }) {\n    dispatch(LOADING(true)); // 로딩중\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n      }),\n    })\n      .then((res) => res.json()) // json 형태로 변환해주고,\n      .then((data) => {\n        dispatch(LOADING(false)); // 로딩 끝남\n        alert(data.msg);\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        dispatch(LOADING(false));\n        console.log(err);\n      });\n  };\n};\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout,\n};\nexport const { setUser, logOut, LOADING } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}