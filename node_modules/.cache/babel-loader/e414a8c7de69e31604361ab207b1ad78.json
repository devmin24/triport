{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nimport { actionCreators as profileActions } from \"redux/modules/profile\";\nimport { useDispatch } from \"react-redux\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false,\n    memberGrade: null,\n    profileImgUrl: null\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n      state.memberGrade = action.payload.memberGrade;\n      state.profileImgUrl = action.payload.profileImgUrl;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload; // 비밀번호 찾기 로딩 중일 때\n    }\n  }\n}); // 토큰 연장\n\nconst tokenExtension = () => {\n  const access_token = localStorage.getItem(\"access_token\");\n  const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n  const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n  const API = `${config}/auth/reissue`;\n  fetch(API, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `${access_token}`\n    },\n    body: JSON.stringify({\n      accessToken: accessToken,\n      refreshToken: refreshToken\n    })\n  }).then(result => {\n    // 헤더에 담긴 토큰과 만료시간 가져오기\n    let access_token = result.headers.get(\"Access-Token\");\n    let refresh_token = result.headers.get(\"Refresh-Token\"); // 로컬에 새로 받은 토큰 저장\n\n    localStorage.setItem(\"access_token\", access_token);\n    localStorage.setItem(\"refresh_token\", refresh_token);\n    console.log(\"토큰 재생성 성공\");\n  }).catch(err => {\n    console.log(err);\n  });\n}; // 회원가입\n\n\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data); // console.log(\"회원가입 성공\");\n\n      if (data.status === 200) {\n        window.alert(data.msg);\n        history.push(\"/login\");\n      } else if (data.status === 400) {\n        window.alert(data.msg);\n        history.push(\"/login\");\n      }\n\n      window.alert(\"회원가입에 성공하였습니다!\");\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\");\n    });\n  };\n}; // 로그인\n\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token_exp = null;\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd\n      })\n    }).then(result => {\n      if (result.status !== 200) {\n        alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n        return {\n          ok: false\n        };\n      } //성공시 토큰, 유저 정보 저장\n\n\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n      // 로컬 스토리지에 토큰 저장하기\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      if (result.ok) {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n        // setInterval(tokenExtension, 1740000); // 29분 후 실행\n\n        setInterval(tokenExtension, 5000); // 5초\n\n        dispatch(setUser({\n          id: result.results.id,\n          nickname: result.results.nickname,\n          memberGrade: result.results.memberGrade,\n          profileImgUrl: result.results.profileImgUrl\n        }));\n        dispatch(profileActions.GET_PROFILE({\n          user_img: result.results.profileImgUrl,\n          memberGrade: result.results.memberGrade,\n          nickname: result.results.nickname\n        }));\n        alert(\"로그인 되었습니다.\");\n        history.replace(\"/\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 소셜 로그인 (카카오) 인가코드 넘기기\n\n\nconst kakaoLogin = code => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(result => {\n      if (result.status !== 200) {\n        alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n        return {\n          ok: false\n        };\n      }\n\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\"); // 로컬 스토리지에 토큰 저장하기\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      if (result.ok) {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        setInterval(tokenExtension, 1740000); // 29분 후 실행\n\n        dispatch(setUser({\n          id: result.results.id,\n          nickname: result.results.nickname,\n          memberGrade: result.results.memberGrade,\n          profileImgUrl: result.results.profileImgUrl\n        }));\n        alert(\"로그인 되었습니다.\");\n        history.replace(\"/\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 소셜 로그아웃\n\n\nconst kakaoLogout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => {\n      console.log(res);\n      console.log(\"카카오 로그아웃 성공!\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 로그인 여부 체크\n\n\nconst loginCheckDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return;\n    }\n\n    dispatch(setUser({\n      id: userInfo.results.id,\n      nickname: userInfo.results.nickname,\n      memberGrade: userInfo.results.memberGrade,\n      profileImgUrl: userInfo.results.profileImgUrl\n    })); // setInterval(tokenExtension, 1740000);\n\n    setInterval(tokenExtension, 5000); // 5초\n\n    dispatch(profileActions.getProfile());\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n}; // 비밀번호 찾기\n\n\nconst FindPwdDB = email => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(LOADING(true)); // 로딩중\n\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(res => res.json()) // json 형태로 변환해주고,\n    .then(data => {\n      dispatch(LOADING(false)); // 로딩 끝남\n\n      alert(data.msg);\n      history.push(\"/login\");\n    }).catch(err => {\n      dispatch(LOADING(false));\n      console.log(err);\n    });\n  };\n};\n\n_c = FindPwdDB;\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout\n};\nexport const {\n  setUser,\n  logOut,\n  LOADING\n} = userSlice.actions;\nexport default userSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindPwdDB\");","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","config","actionCreators","profileActions","useDispatch","userSlice","name","initialState","id","nickname","is_login","is_loading","memberGrade","profileImgUrl","reducers","setUser","state","action","payload","logOut","LOADING","tokenExtension","access_token","localStorage","getItem","accessToken","split","refreshToken","API","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","result","get","refresh_token","setItem","console","log","catch","err","signupDB","email","pwd","pwdcheck","dispatch","getState","history","password","passwordCheck","res","json","data","status","window","alert","msg","push","loginDB","access_token_exp","ok","setInterval","results","GET_PROFILE","user_img","replace","error","kakaoLogin","code","kakaoLogout","loginCheckDB","userInfo","parse","getProfile","logout","removeItem","FindPwdDB","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nimport { actionCreators as profileActions } from \"redux/modules/profile\";\nimport { useDispatch } from \"react-redux\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false,\n    memberGrade: null,\n    profileImgUrl: null,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n      state.memberGrade = action.payload.memberGrade;\n      state.profileImgUrl = action.payload.profileImgUrl;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload; // 비밀번호 찾기 로딩 중일 때\n    },\n  },\n});\n// 토큰 연장\nconst tokenExtension = () => {\n  const access_token = localStorage.getItem(\"access_token\");\n  const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n  const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n  const API = `${config}/auth/reissue`;\n  fetch(API, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: `${access_token}`,\n    },\n    body: JSON.stringify({\n      accessToken: accessToken,\n      refreshToken: refreshToken,\n    }),\n  })\n    .then((result) => {\n      // 헤더에 담긴 토큰과 만료시간 가져오기\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n\n      // 로컬에 새로 받은 토큰 저장\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      console.log(\"토큰 재생성 성공\");\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        // console.log(\"회원가입 성공\");\n        if (data.status === 200) {\n          window.alert(data.msg);\n          history.push(\"/login\");\n        } else if (data.status === 400) {\n          window.alert(data.msg);\n          history.push(\"/login\");\n        }\n        window.alert(\"회원가입에 성공하였습니다!\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\n          \"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\"\n        );\n      });\n  };\n};\n// 로그인\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    let access_token_exp = null;\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        if (result.status !== 200) {\n          alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n          return { ok: false };\n        }\n        //성공시 토큰, 유저 정보 저장\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        if (result.ok) {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          // setInterval(tokenExtension, 1740000); // 29분 후 실행\n          setInterval(tokenExtension, 5000); // 5초\n          dispatch(\n            setUser({\n              id: result.results.id,\n              nickname: result.results.nickname,\n              memberGrade: result.results.memberGrade,\n              profileImgUrl: result.results.profileImgUrl,\n            })\n          );\n          dispatch(\n            profileActions.GET_PROFILE({\n              user_img: result.results.profileImgUrl,\n              memberGrade: result.results.memberGrade,\n              nickname: result.results.nickname,\n            })\n          );\n          alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n// 소셜 로그인 (카카오) 인가코드 넘기기\nconst kakaoLogin = (code) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((result) => {\n        if (result.status !== 200) {\n          alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n          return { ok: false };\n        }\n\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        if (result.ok) {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          setInterval(tokenExtension, 1740000); // 29분 후 실행\n          dispatch(\n            setUser({\n              id: result.results.id,\n              nickname: result.results.nickname,\n              memberGrade: result.results.memberGrade,\n              profileImgUrl: result.results.profileImgUrl,\n            })\n          );\n          alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// 소셜 로그아웃\nconst kakaoLogout = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        console.log(\"카카오 로그아웃 성공!\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return;\n    }\n    dispatch(\n      setUser({\n        id: userInfo.results.id,\n        nickname: userInfo.results.nickname,\n        memberGrade: userInfo.results.memberGrade,\n        profileImgUrl: userInfo.results.profileImgUrl,\n      })\n    );\n\n    // setInterval(tokenExtension, 1740000);\n    setInterval(tokenExtension, 5000); // 5초\n    dispatch(profileActions.getProfile());\n  };\n};\n// 로그아웃\nconst logout = () => {\n  return function (dispatch, getState, { history }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n};\n// 비밀번호 찾기\nconst FindPwdDB = (email) => {\n  return function (dispatch, getState, { history }) {\n    dispatch(LOADING(true)); // 로딩중\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n      }),\n    })\n      .then((res) => res.json()) // json 형태로 변환해주고,\n      .then((data) => {\n        dispatch(LOADING(false)); // 로딩 끝남\n        alert(data.msg);\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        dispatch(LOADING(false));\n        console.log(err);\n      });\n  };\n};\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout,\n};\nexport const { setUser, logOut, LOADING } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}