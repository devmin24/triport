{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst profileimgSlice = createSlice({\n  name: \"profileimg\",\n  initialState: {\n    user_img: \"https://i.ibb.co/MDKhN7F/kakao-11.jpg\",\n    user_data: []\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_data = action.payload;\n      state.user_img = action.payload;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    }\n  }\n}); // 프로필 조회\n\nconst getProfile = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        accessToken: `${access_token}`\n      }\n    }).then(res => {\n      console.log(res);\n    });\n  };\n}; // 프로필 이미지 전송\n// 프로필 수정\n\n\nconst updateProfileimg = preview => {\n  return function (dispatch) {\n    //프로필 이미지 수정했다면?\n    let formData = new FormData(); // 폼데이터로 저장\n\n    formData.append(\"file\", img);\n    const img_data = {\n      url: \"/api/upload/\",\n      method: \"POST\",\n      data: formData\n    };\n    axios(img_data).then(res => {\n      dispatch(updateProfile(res.data, name, interest));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nexport const {\n  SET_PREVIEW,\n  GET_PROFILE,\n  UPDATE_PROFILE\n} = profileimgSlice.actions;\nexport const actionCreators = {\n  getProfile\n};\nexport default profileimgSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/profile.js"],"names":["createSlice","config","profileimgSlice","name","initialState","user_img","user_data","reducers","SET_PREVIEW","state","action","payload","GET_PROFILE","UPDATE_PROFILE","uploading","getProfile","dispatch","getState","history","API","access_token","localStorage","getItem","console","log","fetch","method","headers","Accept","accessToken","then","res","updateProfileimg","preview","formData","FormData","append","img","img_data","url","data","axios","updateProfile","interest","catch","err","actions","actionCreators","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,eAAe,GAAGF,WAAW,CAAC;AAClCG,EAAAA,IAAI,EAAE,YAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,uCADE;AAEZC,IAAAA,SAAS,EAAE;AAFC,GAFoB;AAMlCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACC,OAAxB;AACD,KAHO;AAIRC,IAAAA,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACC,OAAzB;AACAF,MAAAA,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACC,OAAxB;AACD,KAPO;AAQRE,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACK,SAAN,GAAkBJ,MAAM,CAACC,OAAzB;AACD;AAVO;AANwB,CAAD,CAAnC,C,CAoBA;;AACA,MAAMI,UAAU,GAAG,MAAM;AACvB,SAAO,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD,UAAMC,GAAG,GAAI,GAAElB,MAAO,iBAAtB;AACA,QAAImB,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;;AAEA,QAAI,CAACF,YAAL,EAAmB;AACjBG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;AACD;;AAEDC,IAAAA,KAAK,CAACN,GAAD,EAAM;AACTO,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGPC,QAAAA,WAAW,EAAG,GAAET,YAAa;AAHtB;AAFA,KAAN,CAAL,CAOGU,IAPH,CAOSC,GAAD,IAAS;AACfR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACD,KATD;AAUD,GAnBD;AAoBD,CArBD,C,CAuBA;AAEA;;;AACA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO,UAAUjB,QAAV,EAAoB;AACzB;AACA,QAAIkB,QAAQ,GAAG,IAAIC,QAAJ,EAAf,CAFyB,CAGzB;;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBC,GAAxB;AACA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,GAAG,EAAE,cADU;AAEfb,MAAAA,MAAM,EAAE,MAFO;AAGfc,MAAAA,IAAI,EAAEN;AAHS,KAAjB;AAKAO,IAAAA,KAAK,CAACH,QAAD,CAAL,CACGR,IADH,CACSC,GAAD,IAAS;AACbf,MAAAA,QAAQ,CAAC0B,aAAa,CAACX,GAAG,CAACS,IAAL,EAAWrC,IAAX,EAAiBwC,QAAjB,CAAd,CAAR;AACD,KAHH,EAIGC,KAJH,CAIUC,GAAD,IAAS;AACdtB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,GAAZ;AACD,KANH;AAOD,GAjBD;AAkBD,CAnBD;;AAqBA,OAAO,MAAM;AAAErC,EAAAA,WAAF;AAAeI,EAAAA,WAAf;AAA4BC,EAAAA;AAA5B,IACXX,eAAe,CAAC4C,OADX;AAGP,OAAO,MAAMC,cAAc,GAAG;AAC5BhC,EAAAA;AAD4B,CAAvB;AAIP,eAAeb,eAAe,CAAC8C,OAA/B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst profileimgSlice = createSlice({\n  name: \"profileimg\",\n  initialState: {\n    user_img: \"https://i.ibb.co/MDKhN7F/kakao-11.jpg\",\n    user_data: [],\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_data = action.payload;\n      state.user_img = action.payload;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    },\n  },\n});\n\n// 프로필 조회\nconst getProfile = () => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        accessToken: `${access_token}`,\n      },\n    }).then((res) => {\n      console.log(res);\n    });\n  };\n};\n\n// 프로필 이미지 전송\n\n// 프로필 수정\nconst updateProfileimg = (preview) => {\n  return function (dispatch) {\n    //프로필 이미지 수정했다면?\n    let formData = new FormData();\n    // 폼데이터로 저장\n    formData.append(\"file\", img);\n    const img_data = {\n      url: \"/api/upload/\",\n      method: \"POST\",\n      data: formData,\n    };\n    axios(img_data)\n      .then((res) => {\n        dispatch(updateProfile(res.data, name, interest));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport const { SET_PREVIEW, GET_PROFILE, UPDATE_PROFILE } =\n  profileimgSlice.actions;\n\nexport const actionCreators = {\n  getProfile,\n};\n\nexport default profileimgSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}