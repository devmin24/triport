{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst profileimgSlice = createSlice({\n  name: \"profile\",\n  initialState: {\n    user_img: \"\",\n    memberGrade: null,\n    nickname: null,\n    trils_data: [],\n    trilog_data: []\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_img = action.payload.user_img;\n      state.memberGrade = action.payload.memberGrade;\n      state.nickname = action.payload.nickname;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    },\n    TRILS_LOAD: (state, action) => {\n      state.trils_data = action.payload;\n    },\n    TRILOG_LOAD: (state, action) => {\n      state.trilog_data = action.payload;\n    }\n  }\n}); // 프로필 조회\n\nconst getProfile = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      dispatch(GET_PROFILE({\n        user_img: data.results.profileImgUrl,\n        memberGrade: data.results.memberGrade,\n        nickname: data.results.nickname\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 프로필 수정\n\n\nconst updateProfile = (nickname, newpwd, newpwdcheck, img) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n    console.log(access_token);\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    let formData = new FormData();\n    formData.append(\"nickname\", nickname);\n    formData.append(\"newPassword\", newpwd);\n    formData.append(\"newPasswordCheck\", newpwdcheck);\n    formData.append(\"profileImgFile\", img);\n    console.log(formData);\n    fetch(API, {\n      method: \"POST\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Accept: \"multipart/form-data\",\n        Authorization: `${access_token}`\n      },\n      body: formData // JSON.stringify({\n      //   nickname: nickname,\n      //   newPassword: newpwd,\n      //   newPasswordCheck: newpwdcheck,\n      //   profileImgUrl: img,\n      // }),\n\n    }).then(res => res.json()).then(data => {\n      console.log(data); // alert(\"수정되었습니다!\");\n      // history.replace(\"/\");\n      // history.go(0); // 메인 페이지로 돌아간 후 새로고침\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 내가 쓴 Trils 조회\n\n\nconst myTrilsLoad = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/posts/member`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      const results = data.results;\n      dispatch(TRILS_LOAD(results));\n    });\n  };\n}; // 내가 쓴 Trilog 조회\n\n\nconst myTrilogLoad = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/boards/member`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      const results = data.results;\n      dispatch(TRILOG_LOAD(results));\n    });\n  };\n};\n\nexport const {\n  SET_PREVIEW,\n  GET_PROFILE,\n  UPDATE_PROFILE,\n  TRILS_LOAD,\n  TRILOG_LOAD\n} = profileimgSlice.actions;\nexport const actionCreators = {\n  getProfile,\n  updateProfile,\n  myTrilsLoad,\n  myTrilogLoad\n};\nexport default profileimgSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/profile.js"],"names":["createSlice","config","profileimgSlice","name","initialState","user_img","memberGrade","nickname","trils_data","trilog_data","reducers","SET_PREVIEW","state","action","payload","GET_PROFILE","UPDATE_PROFILE","uploading","TRILS_LOAD","TRILOG_LOAD","getProfile","dispatch","getState","history","API","access_token","localStorage","getItem","console","log","fetch","method","headers","Accept","Authorization","then","res","json","data","results","profileImgUrl","catch","err","updateProfile","newpwd","newpwdcheck","img","formData","FormData","append","body","myTrilsLoad","myTrilogLoad","actions","actionCreators","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst profileimgSlice = createSlice({\n  name: \"profile\",\n  initialState: {\n    user_img: \"\",\n    memberGrade: null,\n    nickname: null,\n    trils_data: [],\n    trilog_data: [],\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_img = action.payload.user_img;\n      state.memberGrade = action.payload.memberGrade;\n      state.nickname = action.payload.nickname;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    },\n    TRILS_LOAD: (state, action) => {\n      state.trils_data = action.payload;\n    },\n    TRILOG_LOAD: (state, action) => {\n      state.trilog_data = action.payload;\n    },\n  },\n});\n\n// 프로필 조회\nconst getProfile = () => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        dispatch(\n          GET_PROFILE({\n            user_img: data.results.profileImgUrl,\n            memberGrade: data.results.memberGrade,\n            nickname: data.results.nickname,\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 프로필 수정\nconst updateProfile = (nickname, newpwd, newpwdcheck, img) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n    console.log(access_token);\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    let formData = new FormData();\n\n    formData.append(\"nickname\", nickname);\n    formData.append(\"newPassword\", newpwd);\n    formData.append(\"newPasswordCheck\", newpwdcheck);\n    formData.append(\"profileImgFile\", img);\n    console.log(formData);\n\n    fetch(API, {\n      method: \"POST\",\n\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Accept: \"multipart/form-data\",\n        Authorization: `${access_token}`,\n      },\n      body: formData,\n      // JSON.stringify({\n      //   nickname: nickname,\n      //   newPassword: newpwd,\n      //   newPasswordCheck: newpwdcheck,\n      //   profileImgUrl: img,\n      // }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        // alert(\"수정되었습니다!\");\n        // history.replace(\"/\");\n        // history.go(0); // 메인 페이지로 돌아간 후 새로고침\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 내가 쓴 Trils 조회\nconst myTrilsLoad = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/posts/member`;\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const results = data.results;\n        dispatch(TRILS_LOAD(results));\n      });\n  };\n};\n\n// 내가 쓴 Trilog 조회\nconst myTrilogLoad = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/boards/member`;\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const results = data.results;\n        dispatch(TRILOG_LOAD(results));\n      });\n  };\n};\n\nexport const {\n  SET_PREVIEW,\n  GET_PROFILE,\n  UPDATE_PROFILE,\n  TRILS_LOAD,\n  TRILOG_LOAD,\n} = profileimgSlice.actions;\n\nexport const actionCreators = {\n  getProfile,\n  updateProfile,\n  myTrilsLoad,\n  myTrilogLoad,\n};\n\nexport default profileimgSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}