{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nimport { actionCreators as userCreators } from \"./user\";\nconst trilseSlice = createSlice({\n  name: \"trils\",\n  initialState: {\n    data: [],\n    modal: false,\n    detail: [],\n    page: 1,\n    is_last: false\n  },\n  reducers: {\n    GET_POST: (state, action) => {\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n      state.is_last = action.payload.is_last;\n    },\n    SHIFT_POST: (state, action) => {\n      state.data.push(...action.payload.result);\n      state.page = action.payload.page;\n      state.is_last = action.payload.is_last;\n    },\n    GET_POST_DETAIL: (state, action) => {\n      state.modal = true;\n      state.detail = action.payload;\n    },\n    MODAL_STATUS: (state, action) => {\n      state.modal = action.payload;\n    },\n    LIKE_OK: (state, action) => {\n      const idx = state.data.findIndex(p => p.information.id === action.payload.information.id);\n      state.data[idx] = action.payload;\n      state.detail = action.payload;\n    },\n    DELETE_POST: (state, action) => {\n      const idx = state.data.findIndex(p => p.information.id === action.payload);\n\n      if (idx !== -1) {\n        state.data.splice(idx, 1);\n      }\n    },\n    SEARCH_POST: (state, action) => {\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n      state.is_last = action.payload.is_last;\n    },\n    EDIT_POST: (state, action) => {\n      const idx = state.data.findIndex(p => p.information.id === action.payload.id);\n      state.data[idx].information.hashtag = action.payload.hashtag;\n      state.detail.information.hashtag = action.payload.hashtag;\n    }\n  }\n});\n\nconst writepost = (video, tags) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    let formData = new FormData();\n    formData.append(\"file\", video);\n    console.log(formData);\n    tags.map((p, idx) => formData.append(\"hashtag\", p));\n    const api = `${config}/api/posts`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`\n      },\n      body: formData\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      if (result.status === 200 && result.ok) {\n        alert(\"정상적으로 작성되었습니다.\");\n        history.replace(\"/\");\n      } else if (result.status === 401) {\n        dispatch(userCreators.logout());\n        alert(\"로그인 시간이 만료되었습니다. 다시 로그인해주세요.\");\n        history.push(\"/login\");\n      } else {\n        alert(result.msg);\n      }\n    }).catch(err => alert(\"업로드 중 에러가 발생했습니다.\", err));\n  };\n};\n\nconst searchPost = (keyword = \"\", LikeOrDate = \"createdAt\", page = 1) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      const results = {\n        result: result.results,\n        page: page + 1,\n        is_last: result.last\n      };\n      dispatch(SEARCH_POST(results));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst setPost = (keyword = \"\", LikeOrDate = \"likeNum\", page = 1) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=1&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      const results = {\n        result: result.results,\n        page: page + 1,\n        is_last: result.last\n      };\n      dispatch(GET_POST(results));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst getPost = (keyword = \"\", LikeOrDate = \"likeNum\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const page = getState().trils.page;\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      const results = {\n        result: result.results,\n        page: page + 1,\n        is_last: result.last\n      };\n\n      if (page === 1) {\n        dispatch(GET_POST(results));\n      } else {\n        dispatch(SHIFT_POST(results));\n      }\n    }).catch(err => console.log(err));\n  };\n};\n\nconst filterPost = (keyword = \"\", LikeOrDate = \"likeNum\", page = 1) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=1&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      const results = {\n        result: result.results,\n        page: page + 1,\n        is_last: result.last\n      };\n      dispatch(GET_POST(results));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst getPostDetail = postId => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(MODAL_STATUS(false));\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts/detail/${postId}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      dispatch(GET_POST_DETAIL(result.results));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst send_like = (postId, like) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/posts/like/${postId}`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      if (result.status === 200 && result.ok) {\n        dispatch(LIKE_OK(result.results));\n      } else if (result.status === 401) {\n        dispatch(userCreators.logout());\n        alert(\"로그인 시간이 만료되었습니다. 다시 로그인해주세요.\");\n        history.push(\"/login\");\n      } else {\n        alert(result.msg);\n      }\n    }).catch(err => console.log(err));\n  };\n};\n\nexport const {\n  GET_POST,\n  SHIFT_POST,\n  GET_POST_DETAIL,\n  MODAL_STATUS,\n  LIKE_OK,\n  DELETE_POST,\n  SEARCH_POST,\n  EDIT_POST\n} = trilseSlice.actions;\nexport const TrilsActions = {\n  writepost,\n  getPost,\n  getPostDetail,\n  send_like,\n  searchPost,\n  setPost,\n  filterPost\n};\nexport default trilseSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/trils.js"],"names":["createSlice","config","actionCreators","userCreators","trilseSlice","name","initialState","data","modal","detail","page","is_last","reducers","GET_POST","state","action","payload","result","SHIFT_POST","push","GET_POST_DETAIL","MODAL_STATUS","LIKE_OK","idx","findIndex","p","information","id","DELETE_POST","splice","SEARCH_POST","EDIT_POST","hashtag","writepost","video","tags","dispatch","getState","history","access_token","localStorage","getItem","formData","FormData","append","console","log","map","api","method","headers","Authorization","body","fetch","then","json","status","ok","alert","replace","logout","msg","catch","err","searchPost","keyword","LikeOrDate","results","last","setPost","getPost","trils","filterPost","getPostDetail","postId","send_like","like","actions","TrilsActions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nimport { actionCreators as userCreators } from \"./user\";\n\nconst trilseSlice = createSlice({\n  name: \"trils\",\n  initialState: {\n    data: [],\n    modal: false,\n    detail: [],\n    page: 1,\n    is_last: false,\n  },\n  reducers: {\n    GET_POST: (state, action) => {\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n      state.is_last = action.payload.is_last;\n    },\n    SHIFT_POST: (state, action) => {\n      state.data.push(...action.payload.result);\n      state.page = action.payload.page;\n      state.is_last = action.payload.is_last;\n    },\n    GET_POST_DETAIL: (state, action) => {\n      state.modal = true;\n      state.detail = action.payload;\n    },\n    MODAL_STATUS: (state, action) => {\n      state.modal = action.payload;\n    },\n    LIKE_OK: (state, action) => {\n      const idx = state.data.findIndex(\n        (p) => p.information.id === action.payload.information.id\n      );\n      state.data[idx] = action.payload;\n      state.detail = action.payload;\n    },\n    DELETE_POST: (state, action) => {\n      const idx = state.data.findIndex(\n        (p) => p.information.id === action.payload\n      );\n      if (idx !== -1) {\n        state.data.splice(idx, 1);\n      }\n    },\n    SEARCH_POST: (state, action) => {\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n      state.is_last = action.payload.is_last;\n    },\n    EDIT_POST: (state, action) => {\n      const idx = state.data.findIndex(\n        (p) => p.information.id === action.payload.id\n      );\n      state.data[idx].information.hashtag = action.payload.hashtag;\n      state.detail.information.hashtag = action.payload.hashtag;\n    },\n  },\n});\n\nconst writepost = (video, tags) => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    let formData = new FormData();\n    formData.append(\"file\", video);\n    console.log(formData);\n    tags.map((p, idx) => formData.append(\"hashtag\", p));\n    const api = `${config}/api/posts`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n      body: formData,\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        if (result.status === 200 && result.ok) {\n          alert(\"정상적으로 작성되었습니다.\");\n          history.replace(\"/\");\n        } else if (result.status === 401) {\n          dispatch(userCreators.logout());\n          alert(\"로그인 시간이 만료되었습니다. 다시 로그인해주세요.\");\n          history.push(\"/login\");\n        } else {\n          alert(result.msg);\n        }\n      })\n      .catch((err) => alert(\"업로드 중 에러가 발생했습니다.\", err));\n  };\n};\n\nconst searchPost = (keyword = \"\", LikeOrDate = \"createdAt\", page = 1) => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        const results = {\n          result: result.results,\n          page: page + 1,\n          is_last: result.last,\n        };\n        dispatch(SEARCH_POST(results));\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst setPost = (keyword = \"\", LikeOrDate = \"likeNum\", page = 1) => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=1&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        const results = {\n          result: result.results,\n          page: page + 1,\n          is_last: result.last,\n        };\n        dispatch(GET_POST(results));\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst getPost = (keyword = \"\", LikeOrDate = \"likeNum\") => {\n  return function (dispatch, getState, { history }) {\n    const page = getState().trils.page;\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        const results = {\n          result: result.results,\n          page: page + 1,\n          is_last: result.last,\n        };\n        if (page === 1) {\n          dispatch(GET_POST(results));\n        } else {\n          dispatch(SHIFT_POST(results));\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst filterPost = (keyword = \"\", LikeOrDate = \"likeNum\", page = 1) => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=1&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        const results = {\n          result: result.results,\n          page: page + 1,\n          is_last: result.last,\n        };\n        dispatch(GET_POST(results));\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst getPostDetail = (postId) => {\n  return function (dispatch, getState, { history }) {\n    dispatch(MODAL_STATUS(false));\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts/detail/${postId}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        dispatch(GET_POST_DETAIL(result.results));\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst send_like = (postId, like) => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/posts/like/${postId}`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        if (result.status === 200 && result.ok) {\n          dispatch(LIKE_OK(result.results));\n        } else if (result.status === 401) {\n          dispatch(userCreators.logout());\n          alert(\"로그인 시간이 만료되었습니다. 다시 로그인해주세요.\");\n          history.push(\"/login\");\n        } else {\n          alert(result.msg);\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nexport const {\n  GET_POST,\n  SHIFT_POST,\n  GET_POST_DETAIL,\n  MODAL_STATUS,\n  LIKE_OK,\n  DELETE_POST,\n  SEARCH_POST,\n  EDIT_POST,\n} = trilseSlice.actions;\n\nexport const TrilsActions = {\n  writepost,\n  getPost,\n  getPostDetail,\n  send_like,\n  searchPost,\n  setPost,\n  filterPost,\n};\n\nexport default trilseSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}