{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    }\n  }\n}); // 회원가입\n\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname\n      })\n    }).then(() => {\n      console.log(\"회원가입 성공\");\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\");\n    });\n  };\n}; // 로그인\n\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/auth/login\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd\n      })\n    }).then(result => {\n      //성공시 토큰, 유저 정보 저장\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      console.log(access_token);\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      console.log(result); //성공시 state.user 저장\n\n      if (result.status === 401) {\n        window.alert(\"로그인에 실패했습니다.\");\n      } else {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        dispatch(setUser({\n          id: result.id,\n          nickname: result.nickname\n        }));\n        window.alert(\"로그인 성공\");\n        history.push(\"/trils\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 로그인 여부 체크\n\n\nconst loginCheckDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(userInfo);\n\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return false;\n    }\n\n    dispatch(setUser({\n      id: userInfo.id,\n      nickname: userInfo.nickname\n    }));\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    history.replace(\"/\");\n  };\n};\n\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout\n};\nexport const {\n  setUser,\n  logOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","userSlice","name","initialState","id","nickname","is_login","reducers","setUser","state","action","payload","logOut","signupDB","email","pwd","pwdcheck","dispatch","getState","history","API","fetch","method","headers","Accept","body","JSON","stringify","password","passwordCheck","then","console","log","push","catch","err","window","alert","loginDB","result","access_token","get","refresh_token","localStorage","setItem","json","status","error","loginCheckDB","getItem","userInfo","parse","logout","removeItem","replace","actionCreators","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n  },\n});\n\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then(() => {\n        console.log(\"회원가입 성공\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\n          \"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\"\n        );\n      });\n  };\n};\n\n// 로그인\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/auth/login\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        //성공시 토큰, 유저 정보 저장\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n\n        console.log(access_token);\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        console.log(result);\n        //성공시 state.user 저장\n        if (result.status === 401) {\n          window.alert(\"로그인에 실패했습니다.\");\n        } else {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          dispatch(\n            setUser({\n              id: result.id,\n              nickname: result.nickname,\n            })\n          );\n          window.alert(\"로그인 성공\");\n          history.push(\"/trils\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(userInfo);\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return false;\n    }\n    dispatch(\n      setUser({\n        id: userInfo.id,\n        nickname: userInfo.nickname,\n      })\n    );\n  };\n};\n\n// 로그아웃\nconst logout = () => {\n  return function (dispatch, getState, { history }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    history.replace(\"/\");\n  };\n};\n\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n};\n\nexport const { setUser, logOut } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}