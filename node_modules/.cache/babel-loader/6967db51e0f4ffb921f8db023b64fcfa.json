{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload;\n    }\n  }\n}); // 회원가입\n\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname\n      })\n    }).then(res => {\n      console.log(\"회원가입 성공\");\n      window.alert(\"회원가입에 성공하였습니다!\");\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\");\n    });\n  };\n}; // 로그인\n\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd\n      })\n    }).then(result => {\n      //성공시 토큰, 유저 정보 저장\n      console.log(result);\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n\n      const Current_time = new Date().getTime();\n      setTimeout(tokenExtension(), access_token_exp - Current_time - 60000); // 로컬 스토리지에 토큰 저장하기\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      console.log(result); //성공시 state.user 저장\n\n      if (result.status === 401) {\n        window.alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n      } else {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        dispatch(setUser({\n          id: result.id,\n          nickname: result.nickname\n        }));\n        window.alert(\"로그인 되었습니다.\");\n        history.replace(\"/\");\n        history.go(0); // 메인 페이지로 돌아간 후 새로고침\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 소셜 로그인 (카카오) 인가코드 넘기기\n\n\nconst kakaoLogin = code => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    console.log(API);\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(result => {\n      //성공시 토큰, 유저 정보 저장\n      console.log(result);\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n      // const Current_time = new Date().getTime();\n      // setTimeout(tokenExtension(), access_token_exp - Current_time - 60000);\n      // 로컬 스토리지에 토큰 저장하기\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      console.log(result);\n      console.log(\"카카오 로그인 성공!\"); //성공시 state.user 저장\n\n      if (result.status === 401) {\n        window.alert(\"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\");\n      } else {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        dispatch(setUser({\n          id: result.id,\n          nickname: result.nickname\n        }));\n        window.alert(\"로그인 되었습니다.\");\n        history.push(\"/\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 소셜 로그아웃\n\n\nconst kakaoLogout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => {\n      console.log(res);\n      console.log(\"카카오 로그아웃 성공!\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 토큰 연장\n\n\nconst tokenExtension = () => {\n  return function (dispatch, getState) {\n    const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n    const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n    console.log(accessToken, refreshToken);\n    const API = `${config}/auth/reissue`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        accessToken: accessToken,\n        refreshToken: refreshToken\n      })\n    }).then(result => {\n      console.log(result); // 헤더에 담긴 토큰과 만료시간 가져오기\n\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n      // 현재 시간\n\n      let Current_time = new Date().getTime(); // 기존 토큰 지우고,\n\n      localStorage.clear(); // 로컬에 새로 받은 토큰 저장\n\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token); // 만료되기 1분 전에 재발급하기\n\n      setTimeout(tokenExtension(), access_token_exp - Current_time - 60000);\n      console.log(\"토큰 재생성 성공\");\n      return;\n    }).catch(err => {\n      console.log(err);\n      console.log(\"토큰 재생성 실패\");\n    });\n  };\n}; // 로그인 여부 체크\n\n\nconst loginCheckDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(userInfo);\n\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return false;\n    }\n\n    dispatch(setUser({\n      id: userInfo.results.id,\n      nickname: userInfo.results.nickname\n    }));\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n}; // 비밀번호 찾기\n\n\nconst FindPwdDB = email => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(LOADING(true)); // 로딩중\n\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(res => res.json()) // json 형태로 변환해주고,\n    .then(data => {\n      dispatch(LOADING(false)); // 로딩 끝남\n\n      alert(data.message);\n      history.push(\"/login\");\n    }).catch(err => {\n      dispatch(LOADING(false));\n      console.log(err);\n    });\n  };\n};\n\n_c = FindPwdDB;\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout\n};\nexport const {\n  setUser,\n  logOut,\n  LOADING\n} = userSlice.actions;\nexport default userSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindPwdDB\");","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","config","userSlice","name","initialState","id","nickname","is_login","is_loading","reducers","setUser","state","action","payload","logOut","LOADING","signupDB","email","pwd","pwdcheck","dispatch","getState","history","API","fetch","method","headers","Accept","body","JSON","stringify","password","passwordCheck","then","res","console","log","window","alert","push","catch","err","loginDB","result","access_token","get","refresh_token","access_token_exp","Current_time","Date","getTime","setTimeout","tokenExtension","localStorage","setItem","json","status","replace","go","error","kakaoLogin","code","kakaoLogout","getItem","Authorization","accessToken","split","refreshToken","clear","loginCheckDB","userInfo","parse","results","logout","removeItem","FindPwdDB","data","message","actionCreators","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n    is_loading: false,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n    LOADING: (state, action) => {\n      state.is_loading = action.payload;\n    },\n  },\n});\n\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/signup`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then((res) => {\n        console.log(\"회원가입 성공\");\n        window.alert(\"회원가입에 성공하였습니다!\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\n          \"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\"\n        );\n      });\n  };\n};\n\n// 로그인\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/login`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        //성공시 토큰, 유저 정보 저장\n        console.log(result);\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n\n        const Current_time = new Date().getTime();\n\n        setTimeout(tokenExtension(), access_token_exp - Current_time - 60000);\n\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        console.log(result);\n\n        //성공시 state.user 저장\n        if (result.status === 401) {\n          window.alert(\n            \"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\"\n          );\n        } else {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          dispatch(\n            setUser({\n              id: result.id,\n              nickname: result.nickname,\n            })\n          );\n          window.alert(\"로그인 되었습니다.\");\n          history.replace(\"/\");\n          history.go(0); // 메인 페이지로 돌아간 후 새로고침\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// 소셜 로그인 (카카오) 인가코드 넘기기\nconst kakaoLogin = (code) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/auth/kakao/callback?code=${code}`;\n    console.log(API);\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((result) => {\n        //성공시 토큰, 유저 정보 저장\n        console.log(result);\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n\n        // const Current_time = new Date().getTime();\n        // setTimeout(tokenExtension(), access_token_exp - Current_time - 60000);\n\n        // 로컬 스토리지에 토큰 저장하기\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        console.log(result);\n        console.log(\"카카오 로그인 성공!\");\n\n        //성공시 state.user 저장\n        if (result.status === 401) {\n          window.alert(\n            \"로그인에 실패했습니다. 아이디 혹은 비밀번호를 확인해주세요.\"\n          );\n        } else {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          dispatch(\n            setUser({\n              id: result.id,\n              nickname: result.nickname,\n            })\n          );\n          window.alert(\"로그인 되었습니다.\");\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 소셜 로그아웃\nconst kakaoLogout = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n\n    const API = `${config}/auth/logout`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => {\n        console.log(res);\n        console.log(\"카카오 로그아웃 성공!\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 토큰 연장\nconst tokenExtension = () => {\n  return function (dispatch, getState) {\n    const accessToken = localStorage.getItem(\"access_token\").split(\" \")[1];\n    const refreshToken = localStorage.getItem(\"refresh_token\").split(\" \")[1];\n    console.log(accessToken, refreshToken);\n\n    const API = `${config}/auth/reissue`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        accessToken: accessToken,\n        refreshToken: refreshToken,\n      }),\n    })\n      .then((result) => {\n        console.log(result);\n        // 헤더에 담긴 토큰과 만료시간 가져오기\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n\n        // 현재 시간\n        let Current_time = new Date().getTime();\n\n        // 기존 토큰 지우고,\n        localStorage.clear();\n\n        // 로컬에 새로 받은 토큰 저장\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n\n        // 만료되기 1분 전에 재발급하기\n        setTimeout(tokenExtension(), access_token_exp - Current_time - 60000);\n        console.log(\"토큰 재생성 성공\");\n\n        return;\n      })\n      .catch((err) => {\n        console.log(err);\n        console.log(\"토큰 재생성 실패\");\n      });\n  };\n};\n\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(userInfo);\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return false;\n    }\n    dispatch(\n      setUser({\n        id: userInfo.results.id,\n        nickname: userInfo.results.nickname,\n      })\n    );\n  };\n};\n\n// 로그아웃\nconst logout = () => {\n  return function (dispatch, getState, { history }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    console.log(\"일반 로그아웃 성공!\");\n    alert(\"로그아웃 되었습니다.\");\n    history.replace(\"/\");\n  };\n};\n\n// 비밀번호 찾기\nconst FindPwdDB = (email) => {\n  return function (dispatch, getState, { history }) {\n    dispatch(LOADING(true)); // 로딩중\n    const API = `${config}/mail/reset/password`;\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n      }),\n    })\n      .then((res) => res.json()) // json 형태로 변환해주고,\n      .then((data) => {\n        dispatch(LOADING(false)); // 로딩 끝남\n        alert(data.message);\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        dispatch(LOADING(false));\n\n        console.log(err);\n      });\n  };\n};\n\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n  kakaoLogin,\n  kakaoLogout,\n};\n\nexport const { setUser, logOut, LOADING } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}