{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst trilseSlice = createSlice({\n  name: \"trils\",\n  initialState: {\n    data: [],\n    modal: false,\n    detail: [],\n    page: 1,\n    modal_loading: false\n  },\n  reducers: {\n    GET_POST: (state, action) => {\n      console.log(action.payload.result);\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n    },\n    SHIFT_POST: (state, action) => {\n      state.data.push(...action.payload.result);\n      state.page = action.payload.page;\n    },\n    GET_POST_DETAIL: (state, action) => {\n      state.modal = true;\n      state.detail = action.payload;\n      state.modal_loading = false;\n    },\n    CLOSE_MODAL: (state, action) => {\n      state.modal = false;\n    },\n    LIKE_OK: (state, action) => {\n      const idx = state.data.findIndex(p => p.information.id === action.payload.information.id);\n      state.data[idx] = action.payload;\n      state.detail = action.payload;\n    },\n    DELETE_POST: (state, action) => {\n      const idx = state.data.findIndex(p => p.information.id === action.payload);\n\n      if (idx !== -1) {\n        state.data.splice(idx, 1);\n      }\n    },\n    SEARCH_POST: (state, action) => {\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n    },\n    EDIT_POST: (state, action) => {\n      const idx = state.data.findIndex(p => p.information.id === action.payload.id);\n      state.data[idx].information.hashtag = action.payload.hashtag;\n      state.detail.information.hashtag = action.payload.hashtag;\n    },\n    MODAL_LOADING: (state, action) => {\n      state.modal_loading = true;\n    }\n  }\n});\n\nconst writepost = (video, tags) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    let formData = new FormData();\n    formData.append(\"file\", video);\n    tags.map((p, idx) => formData.append(\"hashtag\", p));\n    const api = `${config}/api/posts`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`\n      },\n      body: formData\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      if (result.ok) {\n        alert(\"정상적으로 작성되었습니다.\");\n        history.replace(\"/\");\n      } else {\n        alert(\"작성 중 오류가 발생하였습니다.\");\n      }\n    }).catch(err => console.log(err));\n  };\n};\n\nconst searchPost = (keyword = \"\", LikeOrDate = \"modifiedAt\", page = 1) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      const results = {\n        result: result.results,\n        page: page + 1\n      };\n      dispatch(SEARCH_POST(results));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst getPost = (keyword = \"\", LikeOrDate = \"likeNum\", page = 1) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      const results = {\n        result: result.results,\n        page: page + 1\n      };\n\n      if (page === 1) {\n        dispatch(GET_POST(results));\n      } else {\n        dispatch(SHIFT_POST(results));\n      }\n    }).catch(err => console.log(err));\n  };\n};\n\nconst getPostDetail = postId => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(MODAL_LOADING());\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts/detail/${postId}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      dispatch(GET_POST_DETAIL(result.results));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst send_like = (postId, like) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/posts/like/${postId}`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`\n      }\n    };\n    fetch(api, data).then(result => {\n      return result.json();\n    }).then(result => {\n      if (result.ok) {\n        dispatch(LIKE_OK(result.results));\n      }\n    }).catch(err => console.log(err));\n  };\n};\n\nexport const {\n  GET_POST,\n  SHIFT_POST,\n  GET_POST_DETAIL,\n  CLOSE_MODAL,\n  LIKE_OK,\n  DELETE_POST,\n  SEARCH_POST,\n  EDIT_POST,\n  MODAL_LOADING\n} = trilseSlice.actions;\nexport const TrilsActions = {\n  writepost,\n  getPost,\n  getPostDetail,\n  send_like,\n  searchPost\n};\nexport default trilseSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/trils.js"],"names":["createSlice","config","trilseSlice","name","initialState","data","modal","detail","page","modal_loading","reducers","GET_POST","state","action","console","log","payload","result","SHIFT_POST","push","GET_POST_DETAIL","CLOSE_MODAL","LIKE_OK","idx","findIndex","p","information","id","DELETE_POST","splice","SEARCH_POST","EDIT_POST","hashtag","MODAL_LOADING","writepost","video","tags","dispatch","getState","history","refresh_token","localStorage","getItem","access_token","formData","FormData","append","map","api","method","headers","Authorization","body","fetch","then","json","ok","alert","replace","catch","err","searchPost","keyword","LikeOrDate","results","getPost","getPostDetail","postId","send_like","like","actions","TrilsActions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst trilseSlice = createSlice({\n  name: \"trils\",\n  initialState: {\n    data: [],\n    modal: false,\n    detail: [],\n    page: 1,\n    modal_loading: false,\n  },\n  reducers: {\n    GET_POST: (state, action) => {\n      console.log(action.payload.result)\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n    },\n    SHIFT_POST: (state, action) => {\n      state.data.push(...action.payload.result);\n      state.page = action.payload.page;\n    },\n    GET_POST_DETAIL: (state, action) => {\n      state.modal = true;\n      state.detail = action.payload;\n      state.modal_loading = false;\n    },\n    CLOSE_MODAL: (state, action) => {\n      state.modal = false;\n    },\n    LIKE_OK: (state, action) => {\n      const idx = state.data.findIndex(\n        (p) => p.information.id === action.payload.information.id\n      );\n      state.data[idx] = action.payload;\n      state.detail = action.payload;\n    },\n    DELETE_POST: (state, action) => {\n      const idx = state.data.findIndex(\n        (p) => p.information.id === action.payload\n      );\n      if (idx !== -1) {\n        state.data.splice(idx, 1);\n      }\n    },\n    SEARCH_POST: (state, action) => {\n      state.data = action.payload.result;\n      state.page = action.payload.page;\n    },\n    EDIT_POST: (state, action) => {\n      const idx = state.data.findIndex(\n        (p) => p.information.id === action.payload.id\n      );\n      state.data[idx].information.hashtag = action.payload.hashtag;\n      state.detail.information.hashtag = action.payload.hashtag;\n    },\n    MODAL_LOADING: (state, action) => {\n      state.modal_loading = true;\n    },\n  },\n});\n\nconst writepost = (video, tags) => {\n  return function (dispatch, getState, { history }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    let formData = new FormData();\n    formData.append(\"file\", video);\n    tags.map((p, idx) => formData.append(\"hashtag\", p));\n    const api = `${config}/api/posts`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n      body: formData,\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        if (result.ok) {\n          alert(\"정상적으로 작성되었습니다.\");\n          history.replace(\"/\");\n        }else{\n          alert(\"작성 중 오류가 발생하였습니다.\")\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst searchPost = (keyword = \"\", LikeOrDate = \"modifiedAt\", page = 1) => {\n  return function (dispatch, getState, { history }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        const results = {\n          result: result.results,\n          page: page + 1,\n        };\n        dispatch(SEARCH_POST(results));\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst getPost = (keyword = \"\", LikeOrDate = \"likeNum\", page = 1) => {\n  return function (dispatch, getState, { history }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts?page=${page}&filter=${LikeOrDate}&keyword=${keyword}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        const results = {\n          result: result.results,\n          page: page + 1,\n        };\n        if (page === 1) {\n          dispatch(GET_POST(results));\n        } else {\n          dispatch(SHIFT_POST(results));\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst getPostDetail = (postId) => {\n  return function (dispatch, getState, { history }) {\n    dispatch(MODAL_LOADING());\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/all/posts/detail/${postId}`;\n    const data = {\n      method: \"GET\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        dispatch(GET_POST_DETAIL(result.results));\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nconst send_like = (postId, like) => {\n  return function (dispatch, getState, { history }) {\n    const refresh_token = localStorage.getItem(\"refresh_token\");\n    const access_token = localStorage.getItem(\"access_token\");\n    const api = `${config}/api/posts/like/${postId}`;\n    const data = {\n      method: \"POST\",\n      headers: {\n        Authorization: `${access_token}`,\n      },\n    };\n    fetch(api, data)\n      .then((result) => {\n        return result.json();\n      })\n      .then((result) => {\n        if (result.ok) {\n          dispatch(LIKE_OK(result.results));\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n};\n\nexport const {\n  GET_POST,\n  SHIFT_POST,\n  GET_POST_DETAIL,\n  CLOSE_MODAL,\n  LIKE_OK,\n  DELETE_POST,\n  SEARCH_POST,\n  EDIT_POST,\n  MODAL_LOADING,\n} = trilseSlice.actions;\n\nexport const TrilsActions = {\n  writepost,\n  getPost,\n  getPostDetail,\n  send_like,\n  searchPost,\n};\n\nexport default trilseSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}