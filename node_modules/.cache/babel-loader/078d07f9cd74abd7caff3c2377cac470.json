{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    }\n  }\n}); // 회원가입\n\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname\n      })\n    }).then(() => {\n      console.log(\"회원가입 성공\");\n      window.alert(\"회원가입에 성공하였습니다!\");\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\");\n    });\n  };\n}; // 로그인\n\n\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/auth/login\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd\n      })\n    }).then(result => {\n      //성공시 토큰, 유저 정보 저장\n      console.log(result);\n      let access_token = result.headers.get(\"Access-Token\");\n      let refresh_token = result.headers.get(\"Refresh-Token\");\n      let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n\n      console.log(access_token_exp);\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"refresh_token\", refresh_token);\n      return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n    }).then(result => {\n      console.log(result); //성공시 state.user 저장\n\n      if (result.status === 401) {\n        window.alert(\"로그인에 실패했습니다.\");\n      } else {\n        localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n\n        dispatch(setUser({\n          id: result.id,\n          nickname: result.nickname\n        }));\n        window.alert(\"로그인 성공\");\n        history.push(\"/\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}; // 로그인 연장\n\n\nconst tokenExtension = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const accessToken = localStorage.getItem(\"access_token\");\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n    console.log(accessToken, refreshToken);\n    const API = \"http://13.209.8.146/auth/reissue\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        accessToken: accessToken,\n        refreshToken: refreshToken\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n  };\n}; // 로그인 여부 체크\n\n\nconst loginCheckDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(userInfo);\n\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return false;\n    }\n\n    dispatch(setUser({\n      id: userInfo.id,\n      nickname: userInfo.nickname\n    }));\n  };\n}; // 로그아웃\n\n\nconst logout = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    history.replace(\"/\");\n  };\n}; // 비밀번호 찾기\n\n\nconst FindPwdDB = email => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = \"http://13.209.8.146/mail/reset/password\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email\n      })\n    }).then(res => res.json()) // json 형태로 변환해주고,\n    .then(data => {\n      alert(data.message);\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\n_c = FindPwdDB;\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension\n};\nexport const {\n  setUser,\n  logOut\n} = userSlice.actions;\nexport default userSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindPwdDB\");","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/user.js"],"names":["createSlice","userSlice","name","initialState","id","nickname","is_login","reducers","setUser","state","action","payload","logOut","signupDB","email","pwd","pwdcheck","dispatch","getState","history","API","fetch","method","headers","Accept","body","JSON","stringify","password","passwordCheck","then","console","log","window","alert","push","catch","err","loginDB","result","access_token","get","refresh_token","access_token_exp","localStorage","setItem","json","status","error","tokenExtension","accessToken","getItem","refreshToken","res","data","loginCheckDB","userInfo","parse","logout","removeItem","replace","FindPwdDB","message","actionCreators","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    id: null,\n    nickname: null,\n    is_login: false,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.id = action.payload.id;\n      state.nickname = action.payload.nickname;\n      state.is_login = true;\n    },\n    logOut: (state, action) => {\n      state.id = null;\n      state.nickname = null;\n      state.is_login = false;\n    },\n  },\n});\n\n// 회원가입\nconst signupDB = (email, pwd, pwdcheck, nickname) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/auth/signup\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n        passwordCheck: pwdcheck,\n        nickname: nickname,\n      }),\n    })\n      .then(() => {\n        console.log(\"회원가입 성공\");\n        window.alert(\"회원가입에 성공하였습니다!\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\n          \"회원가입에 실패하셨습니다. 이미 가입된 이메일인지 확인해주세요.\"\n        );\n      });\n  };\n};\n\n// 로그인\nconst loginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/auth/login\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: pwd,\n      }),\n    })\n      .then((result) => {\n        //성공시 토큰, 유저 정보 저장\n        console.log(result);\n        let access_token = result.headers.get(\"Access-Token\");\n        let refresh_token = result.headers.get(\"Refresh-Token\");\n        let access_token_exp = result.headers.get(\"Access-Token-Expire-Time\"); // 토큰 만료시간\n\n        console.log(access_token_exp);\n        localStorage.setItem(\"access_token\", access_token);\n        localStorage.setItem(\"refresh_token\", refresh_token);\n\n        return result.json(); // fetch에서는 서버가 주는 json데이터를 사용하기 위해서\n      })\n      .then((result) => {\n        console.log(result);\n\n        //성공시 state.user 저장\n        if (result.status === 401) {\n          window.alert(\"로그인에 실패했습니다.\");\n        } else {\n          localStorage.setItem(\"userInfo\", JSON.stringify(result)); // JSON.stringfy 가 body에 담아오는 값\n          dispatch(\n            setUser({\n              id: result.id,\n              nickname: result.nickname,\n            })\n          );\n          window.alert(\"로그인 성공\");\n          history.push(\"/\");\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// 로그인 연장\nconst tokenExtension = () => {\n  return function (dispatch, getState, { history }) {\n    const accessToken = localStorage.getItem(\"access_token\");\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n    console.log(accessToken, refreshToken);\n\n    const API = \"http://13.209.8.146/auth/reissue\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        accessToken: accessToken,\n        refreshToken: refreshToken,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n      });\n  };\n};\n\n// 로그인 여부 체크\nconst loginCheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    const access_token = localStorage.getItem(\"access_token\");\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(userInfo);\n    if (!access_token || !userInfo) {\n      // 로컬스토리지에 토큰 또는 유저정보가 없으면\n      return false;\n    }\n    dispatch(\n      setUser({\n        id: userInfo.id,\n        nickname: userInfo.nickname,\n      })\n    );\n  };\n};\n\n// 로그아웃\nconst logout = () => {\n  return function (dispatch, getState, { history }) {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"userInfo\");\n    dispatch(logOut());\n    history.replace(\"/\");\n  };\n};\n\n// 비밀번호 찾기\nconst FindPwdDB = (email) => {\n  return function (dispatch, getState, { history }) {\n    const API = \"http://13.209.8.146/mail/reset/password\";\n    fetch(API, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n      }),\n    })\n      .then((res) => res.json()) // json 형태로 변환해주고,\n      .then((data) => {\n        alert(data.message);\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport const actionCreators = {\n  loginCheckDB,\n  signupDB,\n  loginDB,\n  logout,\n  FindPwdDB,\n  tokenExtension,\n};\n\nexport const { setUser, logOut } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}