{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\nconst profileimgSlice = createSlice({\n  name: \"profile\",\n  initialState: {\n    user_img: \"\",\n    memberGrade: null,\n    nickname: null\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_img = action.payload.user_img;\n      state.memberGrade = action.payload.memberGrade;\n      state.nickname = action.payload.nickname;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    }\n  }\n}); // 프로필 조회\n\nconst getProfile = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n    console.log(access_token);\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch(GET_PROFILE({\n        user_img: data.results.profileImgUrl,\n        memberGrade: data.results.memberGrade,\n        nickname: data.results.nickname\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 프로필 수정\n\n\nconst updateProfile = (nickname, newpwd, newpwdcheck, img) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"POST\",\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      },\n      body: JSON.stringify({\n        nickname: nickname,\n        newPassword: newpwd,\n        newPasswordCheck: newpwdcheck,\n        profileImgUrl: img\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      alert(\"수정되었습니다!\");\n      history.replace(\"/\");\n      history.go(0); // 메인 페이지로 돌아간 후 새로고침\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // 내가 쓴 글 조회\n\n\nconst myPostLoad = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/posts/member`;\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n  };\n};\n\nexport const {\n  SET_PREVIEW,\n  GET_PROFILE,\n  UPDATE_PROFILE\n} = profileimgSlice.actions;\nexport const actionCreators = {\n  getProfile,\n  updateProfile\n};\nexport default profileimgSlice.reducer;","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/triport/src/redux/modules/profile.js"],"names":["createSlice","config","profileimgSlice","name","initialState","user_img","memberGrade","nickname","reducers","SET_PREVIEW","state","action","payload","GET_PROFILE","UPDATE_PROFILE","uploading","getProfile","dispatch","getState","history","API","access_token","localStorage","getItem","console","log","fetch","method","headers","Accept","Authorization","then","res","json","data","results","profileImgUrl","catch","err","updateProfile","newpwd","newpwdcheck","img","body","JSON","stringify","newPassword","newPasswordCheck","alert","replace","go","myPostLoad","actions","actionCreators","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { config } from \"./config\";\n\nconst profileimgSlice = createSlice({\n  name: \"profile\",\n  initialState: {\n    user_img: \"\",\n    memberGrade: null,\n    nickname: null,\n  },\n  reducers: {\n    SET_PREVIEW: (state, action) => {\n      state.user_img = action.payload;\n    },\n    GET_PROFILE: (state, action) => {\n      state.user_img = action.payload.user_img;\n      state.memberGrade = action.payload.memberGrade;\n      state.nickname = action.payload.nickname;\n    },\n    UPDATE_PROFILE: (state, action) => {\n      state.uploading = action.payload;\n    },\n  },\n});\n\n// 프로필 조회\nconst getProfile = () => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n    console.log(access_token);\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"GET\",\n\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        dispatch(\n          GET_PROFILE({\n            user_img: data.results.profileImgUrl,\n            memberGrade: data.results.memberGrade,\n            nickname: data.results.nickname,\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 프로필 수정\nconst updateProfile = (nickname, newpwd, newpwdcheck, img) => {\n  return function (dispatch, getState, { history }) {\n    const API = `${config}/member/profile`;\n    let access_token = localStorage.getItem(\"access_token\");\n\n    if (!access_token) {\n      console.log(\"토큰 없음\");\n      return;\n    }\n\n    fetch(API, {\n      method: \"POST\",\n\n      // 헤더에 토큰 담아 보내기\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n      body: JSON.stringify({\n        nickname: nickname,\n        newPassword: newpwd,\n        newPasswordCheck: newpwdcheck,\n        profileImgUrl: img,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        alert(\"수정되었습니다!\");\n        history.replace(\"/\");\n        history.go(0); // 메인 페이지로 돌아간 후 새로고침\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// 내가 쓴 글 조회\nconst myPostLoad = () => {\n  return function (dispatch, getState, { history }) {\n    let access_token = localStorage.getItem(\"access_token\");\n    const API = `${config}/api/posts/member`;\n\n    fetch(API, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `${access_token}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n      });\n  };\n};\n\nexport const { SET_PREVIEW, GET_PROFILE, UPDATE_PROFILE } =\n  profileimgSlice.actions;\n\nexport const actionCreators = {\n  getProfile,\n  updateProfile,\n};\n\nexport default profileimgSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}